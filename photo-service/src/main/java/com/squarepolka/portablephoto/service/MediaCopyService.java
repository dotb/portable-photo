package com.squarepolka.portablephoto.service;import java.util.List;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Component;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.scheduling.annotation.Async;import com.squarepolka.portablephoto.integration.MediaInterface;import com.squarepolka.portablephoto.persistence.MemoryStore;import com.squarepolka.portablephoto.entity.MediaFolder;import com.squarepolka.portablephoto.entity.MediaFile;@Componentpublic class MediaCopyService{	@Autowired	public MediaInterface mediaInterface;		@Autowired	public ContextService contextService;		@Scheduled(fixedRate = 30000)	public void copyMedia()	{		System.out.println("Looking for removable media...");		List<MediaFolder> folderList = mediaInterface.findRemovableMedia();		System.out.println("Found " + folderList.size() + " removable media folders");				for (MediaFolder folder : folderList)		{			queueFolderForProcessing(folder);		}				processFoldersInQueue();	}		public void queueFolderForProcessing(MediaFolder folder)	{		if (!MemoryStore.mediaFolderQueue.contains(folder))		{			MemoryStore.mediaFolderQueue.add(folder);			System.out.println("Added the media folder for processing: " + folder.name);		}	}		@Async	public void processFoldersInQueue()	{		for (MediaFolder folder : MemoryStore.mediaFolderQueue)		{			if (MediaFolder.toBeProcessed == folder.status)			{				processFolder(folder);			}		}	}		public synchronized void processFolder(MediaFolder folder)	{		System.out.println("Processing folder: " + folder.name);		folder.status = MediaFolder.isBusyProcessing;		for (MediaFile file : folder.mediaFiles())		{			processFile(file);		}		folder.status = MediaFolder.isFinishedProcessing;	}		public void processFile(MediaFile file)	{		MediaFolder dstFolder = contextService.dstFolderForFile(file);		mediaInterface.copyFileToFolder(file, dstFolder);	}}